import matplotlib
matplotlib.use("Agg")

from fastapi import FastAPI, Form, Request
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import os
from analysis_core import run_volatility_analysis
from generate_report import generate_pdf_report, get_plot_data

import asyncio
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram import Update

BOT_TOKEN = os.environ.get("BOT_TOKEN")

# Telegram Bot Handlers
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏. –û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n"
        "/analyze_5\n/analyze_10\n/analyze_30\n/analyze_90"
    )

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE, days: int):
    await update.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞ {days} –¥–Ω–µ–π...")
    crypto_results, sp500_result = run_volatility_analysis(days)
    response = f"üìä <b>–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞ {days} –¥–Ω–µ–π:</b>\n\n"
    for coin in crypto_results:
        response += f"<b>{coin['symbol']}</b> ‚Äî {coin['average_volatility_points']:.1f} –ø—É–Ω–∫—Ç–æ–≤, {coin['average_volatility_percent']:.2f}%\n"
    response += f"<b>{sp500_result['symbol']}</b> ‚Äî {sp500_result['average_volatility_points']:.1f} –ø—É–Ω–∫—Ç–æ–≤, {sp500_result['average_volatility_percent']:.2f}%\n"
    response += "\nüìå –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:\n/analyze_5  /analyze_10  /analyze_30  /analyze_90"
    await update.message.reply_text(response, parse_mode="HTML")

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def make_analyze_handler(d):
    async def handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await analyze_command(update, context, d)
    return handler

# FastAPI setup
app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")
templates.env.globals.update(zip=zip)

@app.get("/", response_class=HTMLResponse)
def index(request: Request):
    print("üîç –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —à–∞–±–ª–æ–Ω index.html")
    return templates.TemplateResponse("index.html", {"request": request})

@app.post("/analyze", response_class=HTMLResponse)
def analyze(request: Request, days: int = Form(...)):
    crypto_results, sp500_result = run_volatility_analysis(days)
    generate_pdf_report()
    plot_data = get_plot_data()

    return templates.TemplateResponse("result.html", {
        "request": request,
        "days": days,
        "crypto_results": crypto_results,
        "sp500_result": sp500_result,
        "report_url": "/download/report",
        "plot_data": plot_data,
        "crypto_tables": [coin["daily_data"] for coin in crypto_results],
        "sp500_table": sp500_result["daily_data"]
    })

@app.get("/download/report")
def download_report():
    filepath = "crypto_volatility_report.pdf"
    if os.path.exists(filepath):
        return FileResponse(filepath, media_type='application/pdf', filename="volatility_report.pdf")
    return {"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}

@app.on_event("startup")
async def start_bot():
    print("üåÄ –í—ã–∑–≤–∞–Ω start_bot()")
    if not BOT_TOKEN:
        print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start_command))

    for d in [5, 10, 30, 90]:
        application.add_handler(CommandHandler(f"analyze_{d}", make_analyze_handler(d)))

    print("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    await application.initialize()
    await application.start()
    asyncio.create_task(application.updater.start_polling())

    print("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

